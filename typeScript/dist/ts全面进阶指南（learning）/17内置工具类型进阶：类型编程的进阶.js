function test() {
  console.log(
    '--- 内置工具类型进阶：类型编程的进阶 ---------------------------------------------'
  );
  test1();
  test2();
}
/**
 * 属性修饰进阶
 *
 * 深层的属性修饰
 * 基于已知属性的部分修饰，以及基于属性类型的部分修饰
 */
function test1() {
  console.log(
    '--- test1 属性修饰进阶 ---------------------------------------------'
  );
  test1_1();
  test1_2();
}
/**
 * 深层次的属性修饰（满足条件时调用自己（递归））
 */
function test1_1() {
  console.log(
    '--- test1_1 深层次的属性修饰 ---------------------------------------------'
  );
}
/**
 * 基于已知属性进行部分修饰
 *
 * 类型编程思路：将复杂的工具类型，拆解为由基础工具类型、类型工具的组合
 * 拆分-处理-组合
 */
function test1_2() {
  console.log(
    '--- test1_2 基于已知属性进行部分修饰 ---------------------------------------------'
  );
}
/**
 * 结构工具类型进阶
 *
 * 基于键值类型的 Pick 与 Omit
 * 子结构的互斥处理
 */
function test2() {
  console.log(
    '--- test2 结构工具类型进阶 ---------------------------------------------'
  );
  test2_1();
}
/**
 * 基于键值类型的 Pick 与 Omit
 * 拆分-处理-组合
 * 拆分：基于期望的类型拿到所有次类型的属性
 */
function test2_1() {
  console.log(
    '--- test2_1 基于键值类型的 Pick 与 Omit ---------------------------------------------'
  );
}
/**
 * 基于结构的互斥工具类型
 */
function test2_2() {}
export default test;
